[
    {
        "id": "f9d84f6bec3ded8e",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "8ac456efc23059a0",
        "type": "exec",
        "z": "f9d84f6bec3ded8e",
        "command": "",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 1080,
        "y": 500,
        "wires": [
            [
                "e74165d64d9fd465"
            ],
            [
                "e74165d64d9fd465"
            ],
            [
                "e74165d64d9fd465"
            ]
        ]
    },
    {
        "id": "0f271cab3c124694",
        "type": "file",
        "z": "f9d84f6bec3ded8e",
        "name": "interfaces",
        "filename": "/home/gw04/config_gw/interfaces",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 750,
        "y": 500,
        "wires": [
            [
                "3809f5a7e0468246",
                "250d581d6f7d78f4"
            ]
        ]
    },
    {
        "id": "720231c428018242",
        "type": "file in",
        "z": "f9d84f6bec3ded8e",
        "name": "",
        "filename": "/etc/network/interfaces",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 390,
        "y": 380,
        "wires": [
            [
                "b9ba05a70fbe050c"
            ]
        ]
    },
    {
        "id": "cbb99bc9b4e85a55",
        "type": "debug",
        "z": "f9d84f6bec3ded8e",
        "name": "debug 3",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 730,
        "y": 320,
        "wires": []
    },
    {
        "id": "5a8aaab1208958f1",
        "type": "inject",
        "z": "f9d84f6bec3ded8e",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 300,
        "wires": [
            [
                "720231c428018242"
            ]
        ]
    },
    {
        "id": "b9ba05a70fbe050c",
        "type": "function",
        "z": "f9d84f6bec3ded8e",
        "name": "Loading Network",
        "func": "function extractEth0Config(content) {\n    const eth0Block = content.match(/iface eth0 inet static([\\s\\S]*?)metric \\d+/);\n    if (!eth0Block) return null;\n\n    const block = eth0Block[1];\n\n    const address = block.match(/address\\s+([^\\s]+)/)?.[1];\n    const netmask = block.match(/netmask\\s+([^\\s]+)/)?.[1];\n    const gateway = block.match(/gateway\\s+([^\\s]+)/)?.[1];\n    const dns = block.match(/dns-nameservers\\s+([^\\n]+)/)?.[1]?.split(/\\s+/);\n\n    return {\n        address,\n        netmask,\n        gateway,\n        primary_dns: dns?.[0] || null,\n        second_dns: dns?.[1] || null\n    };\n}\nvar network = extractEth0Config(msg.payload);\n\nglobal.set(\"network\", network);\nglobal.set(\"new_network\", network);\n\nnode.warn(network);\n\nreturn msg;\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 380,
        "wires": [
            [
                "cbb99bc9b4e85a55",
                "9ae3c32bb66a2ad7"
            ]
        ]
    },
    {
        "id": "bebba2b009537590",
        "type": "template",
        "z": "f9d84f6bec3ded8e",
        "name": "Network template",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "# interfaces(5) file used by ifup(8) and ifdown(8)\n# Include files from /etc/network/interfaces.d:\nsource /etc/network/interfaces.d/*\n################### ETH0 ########################\nauto eth0\niface eth0 inet static\n    address {{payload.address}}\n    netmask {{payload.netmask}}\n    gateway {{payload.gateway}}\n    dns-nameservers {{payload.primary_dns}} {{payload.second_dns}}\n    metric 100\n#################################################\n\n################## BRIDGE 0 #####################\nauto br0\niface br0 inet static\n    address 192.168.21.1\n    netmask 255.255.255.0\n    #gateway 192.168.21.1\n    bridge_ports eth1 wlan0-ap\n    bridge_stp off              \n    bridge_fd 0\n    bridge_maxwait 0\n#################################################\n\n\nauto wlan0-ap\niface wlan0-ap inet manual\n#################### ETH1 ######################\nauto eth1\niface eth1 inet manual\n################################################",
        "output": "str",
        "x": 560,
        "y": 500,
        "wires": [
            [
                "49fb535ed115cf8c",
                "0f271cab3c124694"
            ]
        ]
    },
    {
        "id": "49fb535ed115cf8c",
        "type": "debug",
        "z": "f9d84f6bec3ded8e",
        "name": "debug 2",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 730,
        "y": 440,
        "wires": []
    },
    {
        "id": "fbd72d773851f09d",
        "type": "function",
        "z": "f9d84f6bec3ded8e",
        "name": "get config network",
        "func": "const new_network = global.get(\"new_network\");\n\nfunction isValidIPv4(ip) {\n    const ipv4Regex = /^(25[0-5]|2[0-4]\\d|1\\d{2}|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d{2}|[1-9]?\\d)){3}$/;\n    return ipv4Regex.test(ip);\n}\n\nlet noti = '';\n\nif (!isValidIPv4(new_network.address)) {\n    noti += `Address is invalid IPv4\\n`;\n}\nif (!isValidIPv4(new_network.netmask)) {\n    noti += `Netmask is invalid IPv4\\n`;\n}\nif (!isValidIPv4(new_network.gateway)) {\n    noti += `Gateway is invalid IPv4\\n`;\n}\nif (!isValidIPv4(new_network.primary_dns)) {\n    noti += `Primary DNS is invalid IPv4\\n`;\n}\nif (!isValidIPv4(new_network.second_dns)) {\n    noti += `Second DNS is invalid IPv4\\n`;\n}\n\nif (noti !== '') {\n    return [null, { payload: noti }];\n} else {\n    return [{ payload: new_network }, null];\n}\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 500,
        "wires": [
            [
                "cc31ccb74a32bc7e",
                "bebba2b009537590"
            ],
            [
                "611fa0eb3d4c3a84"
            ]
        ]
    },
    {
        "id": "cc31ccb74a32bc7e",
        "type": "debug",
        "z": "f9d84f6bec3ded8e",
        "name": "debug 4",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 530,
        "y": 440,
        "wires": []
    },
    {
        "id": "3809f5a7e0468246",
        "type": "debug",
        "z": "f9d84f6bec3ded8e",
        "name": "debug 5",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 930,
        "y": 440,
        "wires": []
    },
    {
        "id": "250d581d6f7d78f4",
        "type": "function",
        "z": "f9d84f6bec3ded8e",
        "name": "cmd network",
        "func": "msg.payload = \"sudo cp /etc/network/interfaces /etc/network/interfaces.bak; \\\n               sudo cp /home/gw04/config_gw/interfaces /etc/network/interfaces;\\\n               sudo systemctl restart networking.service;\\\n               sudo systemctl status networking.service;\\\n               sleep 5;\\\n               sudo reboot;\"\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 920,
        "y": 500,
        "wires": [
            [
                "8ac456efc23059a0"
            ]
        ]
    },
    {
        "id": "e74165d64d9fd465",
        "type": "debug",
        "z": "f9d84f6bec3ded8e",
        "name": "debug 6",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1230,
        "y": 500,
        "wires": []
    },
    {
        "id": "a98d4e206fc728bd",
        "type": "ui_button",
        "z": "f9d84f6bec3ded8e",
        "name": "Submit",
        "group": "91cf05178474047d",
        "order": 6,
        "width": 3,
        "height": 1,
        "passthru": false,
        "label": "Submit",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 110,
        "y": 540,
        "wires": [
            [
                "fbd72d773851f09d"
            ]
        ]
    },
    {
        "id": "ac0f45b6200ad94b",
        "type": "ui_text_input",
        "z": "f9d84f6bec3ded8e",
        "name": "",
        "label": "Address",
        "tooltip": "",
        "group": "91cf05178474047d",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": true,
        "mode": "text",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 690,
        "y": 620,
        "wires": [
            [
                "bbda32bd736524a8"
            ]
        ]
    },
    {
        "id": "b270037cce58b867",
        "type": "ui_text_input",
        "z": "f9d84f6bec3ded8e",
        "name": "",
        "label": "Netmask",
        "tooltip": "",
        "group": "91cf05178474047d",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": true,
        "mode": "text",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 690,
        "y": 680,
        "wires": [
            [
                "5db503fc67f326c3"
            ]
        ]
    },
    {
        "id": "e45468fb8ab30c52",
        "type": "ui_text_input",
        "z": "f9d84f6bec3ded8e",
        "name": "",
        "label": "Gateway",
        "tooltip": "",
        "group": "91cf05178474047d",
        "order": 3,
        "width": 0,
        "height": 0,
        "passthru": true,
        "mode": "text",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 690,
        "y": 740,
        "wires": [
            [
                "13ca0d6ec390ed45"
            ]
        ]
    },
    {
        "id": "fea7a35bb74e9251",
        "type": "function",
        "z": "f9d84f6bec3ded8e",
        "name": "address",
        "func": "msg.payload = global.get(\"network\").address;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 620,
        "wires": [
            [
                "ac0f45b6200ad94b"
            ]
        ]
    },
    {
        "id": "9ae3c32bb66a2ad7",
        "type": "link out",
        "z": "f9d84f6bec3ded8e",
        "name": "link out 1",
        "mode": "link",
        "links": [
            "d8bf836c764c778d"
        ],
        "x": 765,
        "y": 380,
        "wires": []
    },
    {
        "id": "d8bf836c764c778d",
        "type": "link in",
        "z": "f9d84f6bec3ded8e",
        "name": "link in 1",
        "links": [
            "9ae3c32bb66a2ad7"
        ],
        "x": 335,
        "y": 620,
        "wires": [
            [
                "fea7a35bb74e9251",
                "1ea92fe133dca914",
                "ace2472a43915ccb",
                "03b77de899f82c51",
                "acdeca7d4b8b980c"
            ]
        ]
    },
    {
        "id": "bd3fb72b4f3c2075",
        "type": "ui_button",
        "z": "f9d84f6bec3ded8e",
        "name": "Revert",
        "group": "91cf05178474047d",
        "order": 7,
        "width": 3,
        "height": 1,
        "passthru": false,
        "label": "Revert",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 160,
        "y": 420,
        "wires": [
            [
                "720231c428018242"
            ]
        ]
    },
    {
        "id": "bbda32bd736524a8",
        "type": "function",
        "z": "f9d84f6bec3ded8e",
        "name": "new address",
        "func": "function isValidIPv4(ip) {\n    const ipv4Regex = /^(25[0-5]|2[0-4]\\d|1\\d{2}|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d{2}|[1-9]?\\d)){3}$/;\n    return ipv4Regex.test(ip);\n}\n\nlet ivalid = isValidIPv4(msg.payload);\nif (!ivalid)\n{\n    msg.payload = `${msg.payload} is invalid IPv4`\n    return msg;\n}\nelse\n{\n    var new_network = global.get(\"new_network\");\n    new_network.address = msg.payload;\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 880,
        "y": 620,
        "wires": [
            [
                "611fa0eb3d4c3a84"
            ]
        ]
    },
    {
        "id": "1ea92fe133dca914",
        "type": "function",
        "z": "f9d84f6bec3ded8e",
        "name": "netmask",
        "func": "msg.payload = global.get(\"network\").netmask;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 680,
        "wires": [
            [
                "b270037cce58b867"
            ]
        ]
    },
    {
        "id": "8ed9dcd4dfe01c17",
        "type": "ui_text_input",
        "z": "f9d84f6bec3ded8e",
        "name": "",
        "label": "Primary DNS",
        "tooltip": "",
        "group": "91cf05178474047d",
        "order": 4,
        "width": 0,
        "height": 0,
        "passthru": true,
        "mode": "text",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 700,
        "y": 800,
        "wires": [
            [
                "b8d2ebd8e259c3e5"
            ]
        ]
    },
    {
        "id": "ace2472a43915ccb",
        "type": "function",
        "z": "f9d84f6bec3ded8e",
        "name": "gateway",
        "func": "msg.payload = global.get(\"network\").gateway;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 740,
        "wires": [
            [
                "e45468fb8ab30c52"
            ]
        ]
    },
    {
        "id": "2dcf5553f1851544",
        "type": "ui_text_input",
        "z": "f9d84f6bec3ded8e",
        "name": "",
        "label": "Second DNS",
        "tooltip": "",
        "group": "91cf05178474047d",
        "order": 5,
        "width": 0,
        "height": 0,
        "passthru": true,
        "mode": "text",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 700,
        "y": 860,
        "wires": [
            [
                "7a967d32d9bc0375"
            ]
        ]
    },
    {
        "id": "03b77de899f82c51",
        "type": "function",
        "z": "f9d84f6bec3ded8e",
        "name": "primary_dns",
        "func": "msg.payload = global.get(\"network\").primary_dns;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 800,
        "wires": [
            [
                "8ed9dcd4dfe01c17"
            ]
        ]
    },
    {
        "id": "acdeca7d4b8b980c",
        "type": "function",
        "z": "f9d84f6bec3ded8e",
        "name": "second_dns",
        "func": "msg.payload = global.get(\"network\").second_dns;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 860,
        "wires": [
            [
                "2dcf5553f1851544"
            ]
        ]
    },
    {
        "id": "5db503fc67f326c3",
        "type": "function",
        "z": "f9d84f6bec3ded8e",
        "name": "new netmask",
        "func": "function isValidIPv4(ip) {\n    const ipv4Regex = /^(25[0-5]|2[0-4]\\d|1\\d{2}|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d{2}|[1-9]?\\d)){3}$/;\n    return ipv4Regex.test(ip);\n}\n\nlet ivalid = isValidIPv4(msg.payload);\nif (!ivalid)\n{\n    msg.payload = `${msg.payload} is invalid IPv4`\n    return msg;\n}\nelse\n{\n    var new_network = global.get(\"new_network\");\n    new_network.netmask = msg.payload;\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 880,
        "y": 680,
        "wires": [
            [
                "611fa0eb3d4c3a84"
            ]
        ]
    },
    {
        "id": "13ca0d6ec390ed45",
        "type": "function",
        "z": "f9d84f6bec3ded8e",
        "name": "new gateway",
        "func": "function isValidIPv4(ip) {\n    const ipv4Regex = /^(25[0-5]|2[0-4]\\d|1\\d{2}|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d{2}|[1-9]?\\d)){3}$/;\n    return ipv4Regex.test(ip);\n}\n\nlet ivalid = isValidIPv4(msg.payload);\nif (!ivalid)\n{\n    msg.payload = `${msg.payload} is invalid IPv4`\n    return msg;\n}\nelse\n{\n    var new_network = global.get(\"new_network\");\n    new_network.gateway = msg.payload;\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 880,
        "y": 740,
        "wires": [
            [
                "611fa0eb3d4c3a84"
            ]
        ]
    },
    {
        "id": "b8d2ebd8e259c3e5",
        "type": "function",
        "z": "f9d84f6bec3ded8e",
        "name": "new primary_dns",
        "func": "function isValidIPv4(ip) {\n    const ipv4Regex = /^(25[0-5]|2[0-4]\\d|1\\d{2}|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d{2}|[1-9]?\\d)){3}$/;\n    return ipv4Regex.test(ip);\n}\n\nlet ivalid = isValidIPv4(msg.payload);\nif (!ivalid)\n{\n    msg.payload = `${msg.payload} is invalid IPv4`\n    return msg;\n}\nelse\n{\n    var new_network = global.get(\"new_network\");\n    new_network.primary_dns = msg.payload;\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 900,
        "y": 800,
        "wires": [
            [
                "611fa0eb3d4c3a84"
            ]
        ]
    },
    {
        "id": "7a967d32d9bc0375",
        "type": "function",
        "z": "f9d84f6bec3ded8e",
        "name": "new second_dns",
        "func": "function isValidIPv4(ip) {\n    const ipv4Regex = /^(25[0-5]|2[0-4]\\d|1\\d{2}|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d{2}|[1-9]?\\d)){3}$/;\n    return ipv4Regex.test(ip);\n}\n\nlet ivalid = isValidIPv4(msg.payload);\nif (!ivalid)\n{\n    msg.payload = `${msg.payload} is invalid IPv4`\n    return msg;\n}\nelse\n{\n    var new_network = global.get(\"new_network\");\n    new_network.second_dns = msg.payload;\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 900,
        "y": 860,
        "wires": [
            [
                "611fa0eb3d4c3a84"
            ]
        ]
    },
    {
        "id": "611fa0eb3d4c3a84",
        "type": "ui_toast",
        "z": "f9d84f6bec3ded8e",
        "position": "top right",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "className": "",
        "topic": "",
        "name": "",
        "x": 1140,
        "y": 600,
        "wires": []
    },
    {
        "id": "cf486516d7b7ac20",
        "type": "ui_text_input",
        "z": "f9d84f6bec3ded8e",
        "name": "",
        "label": "Password",
        "tooltip": "",
        "group": "01bec776cfc5c12a",
        "order": 4,
        "width": 0,
        "height": 0,
        "passthru": true,
        "mode": "password",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 640,
        "y": 1220,
        "wires": [
            [
                "00765155b4a2b878"
            ]
        ]
    },
    {
        "id": "d28dd4839fc73e5f",
        "type": "ui_text_input",
        "z": "f9d84f6bec3ded8e",
        "name": "",
        "label": "Host",
        "tooltip": "",
        "group": "01bec776cfc5c12a",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": true,
        "mode": "text",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 630,
        "y": 1040,
        "wires": [
            [
                "5a977d32565f7b89"
            ]
        ]
    },
    {
        "id": "5d24a9d47713bb16",
        "type": "ui_text_input",
        "z": "f9d84f6bec3ded8e",
        "name": "",
        "label": "Port",
        "tooltip": "",
        "group": "01bec776cfc5c12a",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": true,
        "mode": "text",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 630,
        "y": 1100,
        "wires": [
            [
                "fd5496905f1a328d"
            ]
        ]
    },
    {
        "id": "b0bf994ce145a98f",
        "type": "ui_text_input",
        "z": "f9d84f6bec3ded8e",
        "name": "",
        "label": "User",
        "tooltip": "",
        "group": "01bec776cfc5c12a",
        "order": 3,
        "width": 0,
        "height": 0,
        "passthru": true,
        "mode": "text",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 630,
        "y": 1160,
        "wires": [
            [
                "434054393df8d5ae"
            ]
        ]
    },
    {
        "id": "17f9518eedb87f79",
        "type": "ui_button",
        "z": "f9d84f6bec3ded8e",
        "name": "Submit",
        "group": "01bec776cfc5c12a",
        "order": 5,
        "width": 3,
        "height": 1,
        "passthru": false,
        "label": "Submit",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 150,
        "y": 1400,
        "wires": [
            [
                "d3a76b13e98d08c0"
            ]
        ]
    },
    {
        "id": "6ea20320bd029e33",
        "type": "ui_button",
        "z": "f9d84f6bec3ded8e",
        "name": "Revert",
        "group": "01bec776cfc5c12a",
        "order": 6,
        "width": 3,
        "height": 1,
        "passthru": false,
        "label": "Revert",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 240,
        "y": 1000,
        "wires": [
            [
                "f62d2326fa3d2bee"
            ]
        ]
    },
    {
        "id": "16e3e2905040405a",
        "type": "inject",
        "z": "f9d84f6bec3ded8e",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 240,
        "y": 960,
        "wires": [
            [
                "f62d2326fa3d2bee"
            ]
        ]
    },
    {
        "id": "539e0610274ff2a6",
        "type": "function",
        "z": "f9d84f6bec3ded8e",
        "name": "Loading config MQTT",
        "func": "\nglobal.set(\"mqtt\", msg.payload);\nglobal.set(\"new_mqtt\", msg.payload);\nnode.warn(msg.payload);\nreturn msg;\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 980,
        "wires": [
            [
                "8093c32dda25b81d"
            ]
        ]
    },
    {
        "id": "f62d2326fa3d2bee",
        "type": "file in",
        "z": "f9d84f6bec3ded8e",
        "name": "",
        "filename": "/home/gw04/config_gw/mqtt",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 470,
        "y": 980,
        "wires": [
            [
                "47e4dd69b7092bb1"
            ]
        ]
    },
    {
        "id": "47e4dd69b7092bb1",
        "type": "json",
        "z": "f9d84f6bec3ded8e",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 680,
        "y": 980,
        "wires": [
            [
                "539e0610274ff2a6"
            ]
        ]
    },
    {
        "id": "0bc42c0413281105",
        "type": "function",
        "z": "f9d84f6bec3ded8e",
        "name": "host",
        "func": "msg.payload = global.get(\"mqtt\").host;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 1040,
        "wires": [
            [
                "d28dd4839fc73e5f"
            ]
        ]
    },
    {
        "id": "bd2d41950549fa2f",
        "type": "function",
        "z": "f9d84f6bec3ded8e",
        "name": "port",
        "func": "msg.payload = global.get(\"mqtt\").port;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 1100,
        "wires": [
            [
                "5d24a9d47713bb16"
            ]
        ]
    },
    {
        "id": "76fdd4f88628e513",
        "type": "function",
        "z": "f9d84f6bec3ded8e",
        "name": "user",
        "func": "msg.payload = global.get(\"mqtt\").user;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 1160,
        "wires": [
            [
                "b0bf994ce145a98f"
            ]
        ]
    },
    {
        "id": "306d11c26fbab631",
        "type": "function",
        "z": "f9d84f6bec3ded8e",
        "name": "password",
        "func": "msg.payload = global.get(\"mqtt\").password;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 1220,
        "wires": [
            [
                "cf486516d7b7ac20"
            ]
        ]
    },
    {
        "id": "8093c32dda25b81d",
        "type": "link out",
        "z": "f9d84f6bec3ded8e",
        "name": "link out 2",
        "mode": "link",
        "links": [
            "cfaf2c137181c788"
        ],
        "x": 1025,
        "y": 980,
        "wires": []
    },
    {
        "id": "cfaf2c137181c788",
        "type": "link in",
        "z": "f9d84f6bec3ded8e",
        "name": "link in 2",
        "links": [
            "8093c32dda25b81d"
        ],
        "x": 285,
        "y": 1140,
        "wires": [
            [
                "0bc42c0413281105",
                "bd2d41950549fa2f",
                "76fdd4f88628e513",
                "306d11c26fbab631"
            ]
        ]
    },
    {
        "id": "5a977d32565f7b89",
        "type": "function",
        "z": "f9d84f6bec3ded8e",
        "name": "host",
        "func": "global.get(\"new_mqtt\").host = msg.payload;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 820,
        "y": 1040,
        "wires": [
            []
        ]
    },
    {
        "id": "fd5496905f1a328d",
        "type": "function",
        "z": "f9d84f6bec3ded8e",
        "name": "port",
        "func": "global.get(\"new_mqtt\").port = msg.payload;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 820,
        "y": 1100,
        "wires": [
            []
        ]
    },
    {
        "id": "434054393df8d5ae",
        "type": "function",
        "z": "f9d84f6bec3ded8e",
        "name": "user",
        "func": "global.get(\"new_mqtt\").user = msg.payload;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 820,
        "y": 1160,
        "wires": [
            []
        ]
    },
    {
        "id": "00765155b4a2b878",
        "type": "function",
        "z": "f9d84f6bec3ded8e",
        "name": "password",
        "func": " global.get(\"new_mqtt\").password = msg.payload;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 1220,
        "wires": [
            []
        ]
    },
    {
        "id": "d12bb2ae044e1ffc",
        "type": "ui_form",
        "z": "f9d84f6bec3ded8e",
        "name": "Sign-In",
        "label": "",
        "group": "b82da486.9fc8d8",
        "order": 1,
        "width": 0,
        "height": 0,
        "options": [
            {
                "label": "username",
                "value": "username",
                "type": "text",
                "required": true,
                "rows": null
            },
            {
                "label": "password",
                "value": "password",
                "type": "password",
                "required": true,
                "rows": null
            }
        ],
        "formValue": {
            "username": "",
            "password": ""
        },
        "payload": "",
        "submit": "submit",
        "cancel": "cancel",
        "topic": "",
        "topicType": "str",
        "splitLayout": false,
        "className": "",
        "x": 188.88882064819336,
        "y": 2647.8784646987915,
        "wires": [
            [
                "8a6a54bdf4c734e7",
                "9be11df0171fb457",
                "c31f98a311a32169"
            ]
        ]
    },
    {
        "id": "4c41dcca187228a5",
        "type": "debug",
        "z": "f9d84f6bec3ded8e",
        "name": "Debug Account Log ",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "x": 786.8889122009277,
        "y": 2608.878472328186,
        "wires": []
    },
    {
        "id": "cfb9e4aba91b23ed",
        "type": "comment",
        "z": "f9d84f6bec3ded8e",
        "name": "Sign-In Section",
        "info": "",
        "x": 218.8888282775879,
        "y": 2590.8784608840942,
        "wires": []
    },
    {
        "id": "8a6a54bdf4c734e7",
        "type": "function",
        "z": "f9d84f6bec3ded8e",
        "name": "Account Log",
        "func": "var accountlog =  flow.get(\"accountlog\") || [] ; \n\naccountlog.push({ accessAt : new Date(), username : msg.payload.username})\n\nflow.set(\"accountlog\", accountlog);\n\nmsg.payload = accountlog;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 417.8888282775879,
        "y": 2617.8784608840942,
        "wires": [
            [
                "4c41dcca187228a5"
            ]
        ]
    },
    {
        "id": "9be11df0171fb457",
        "type": "function",
        "z": "f9d84f6bec3ded8e",
        "name": "Account Verification",
        "func": "var accounts =  flow.get(\"accounts\") || [ { username : \"admin\", password : \"admin\"},{ username : \"guest\", password : \"guest\"}] ; \n\nvar username = msg.payload.username ;\nvar password = msg.payload.password ; \n\nmsg.payload = 1;\n\naccounts.forEach(function ( account ){\n    if ( account.username == username ) {\n       msg.payload = 2;\n       if ( account.password == password ) {\n           msg.payload = 0;\n       } \n    }\n});\n\nif ( msg.payload == 0 ) {\n  var currentsocketid = flow.get(\"clientid\") || undefined;\n  if ( currentsocketid !== undefined && currentsocketid !== msg.socketid ) msg.payload = 3;\n}\n// keep the original socketid from msg.socketid;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 430.88886642456055,
        "y": 2662.8784704208374,
        "wires": [
            [
                "03ef006f2ae62a61"
            ]
        ]
    },
    {
        "id": "03ef006f2ae62a61",
        "type": "switch",
        "z": "f9d84f6bec3ded8e",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "1",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "2",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "3",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 4,
        "x": 599.8888626098633,
        "y": 2693.8784532546997,
        "wires": [
            [
                "1c2488442fae18a2"
            ],
            [
                "c653d50a5a758d1d"
            ],
            [
                "6523c562d36e270e"
            ],
            [
                "0165d5a3341eae2a"
            ]
        ]
    },
    {
        "id": "1c2488442fae18a2",
        "type": "function",
        "z": "f9d84f6bec3ded8e",
        "name": "= 0 : Success",
        "func": "/* activate session timer */\nvar sessionTimer =  flow.get(\"sessionTimer\") || 0; \nvar currTime = Date.now();\nflow.set(\"sessionTimer\", currTime);\nflow.set(\"clientid\", msg.socketid);\n/* ui-control payload */\nmsg.payload = { group: {\n    show : [\"PRISM_Network\", \"PRISM_MQTT\"],\n    hide : [\"PRISM_Signin\"]\n    }\n};\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 769.8887062072754,
        "y": 2649.878462791443,
        "wires": [
            [
                "47f9b419e639d2ae"
            ]
        ]
    },
    {
        "id": "c653d50a5a758d1d",
        "type": "function",
        "z": "f9d84f6bec3ded8e",
        "name": "= 1 : Unknown User",
        "func": "msg.payload = \"Username Doesn't exist!!!\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 790.8887138366699,
        "y": 2686.8784646987915,
        "wires": [
            [
                "b76e5b4c2c2f0b09"
            ]
        ]
    },
    {
        "id": "6523c562d36e270e",
        "type": "function",
        "z": "f9d84f6bec3ded8e",
        "name": "= 2 : Wrong Password",
        "func": "msg.payload = \"Invalid Password\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 791.8887825012207,
        "y": 2723.8784770965576,
        "wires": [
            [
                "b76e5b4c2c2f0b09"
            ]
        ]
    },
    {
        "id": "47f9b419e639d2ae",
        "type": "ui_ui_control",
        "z": "f9d84f6bec3ded8e",
        "name": "Go to  Network,MQTT config",
        "x": 1056.8888893127441,
        "y": 2649.8784589767456,
        "wires": [
            []
        ]
    },
    {
        "id": "b76e5b4c2c2f0b09",
        "type": "ui_toast",
        "z": "f9d84f6bec3ded8e",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "outputs": 1,
        "ok": "OK",
        "cancel": "",
        "topic": "Authentication Failed",
        "name": "Authentication Failure Dialog",
        "x": 1056.8887939453125,
        "y": 2706.8784646987915,
        "wires": [
            []
        ]
    },
    {
        "id": "a402dbe7fd9b361b",
        "type": "comment",
        "z": "f9d84f6bec3ded8e",
        "name": "Session Management - 15 secs for this demo",
        "info": "",
        "x": 298.38882064819336,
        "y": 2806.878472328186,
        "wires": []
    },
    {
        "id": "1e2e6129ac3df905",
        "type": "inject",
        "z": "f9d84f6bec3ded8e",
        "name": "Timer",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "3",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 206.8888282775879,
        "y": 2895.878457069397,
        "wires": [
            [
                "afec0f6dc1197cdf",
                "777792010bd06293"
            ]
        ]
    },
    {
        "id": "afec0f6dc1197cdf",
        "type": "function",
        "z": "f9d84f6bec3ded8e",
        "name": "Detect Session Timer",
        "func": "var sessionTimer =  flow.get(\"sessionTimer\") || 0; \nvar currTime = Date.now();\nvar SESSION_TIMEOUT = 15000; //15 secs\n\nif ( sessionTimer === 0 /* Inactive, No user signed in */ ) {\n    msg.payload = 2;\n} else {\n    if ( currTime - sessionTimer > SESSION_TIMEOUT ) {\n      msg.payload = 0;  \n    } else {\n      msg.payload = 1;        \n    }\n}\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 394.888858795166,
        "y": 2861.878472328186,
        "wires": [
            [
                "874556352460e5f2"
            ]
        ]
    },
    {
        "id": "874556352460e5f2",
        "type": "switch",
        "z": "f9d84f6bec3ded8e",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "1",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "2",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 564.8888931274414,
        "y": 2859.878472328186,
        "wires": [
            [
                "2f50f03a78558517"
            ],
            [
                "0ea03af595dc0a11"
            ],
            [
                "01c59a7fa4b61d8e"
            ]
        ]
    },
    {
        "id": "2f50f03a78558517",
        "type": "function",
        "z": "f9d84f6bec3ded8e",
        "name": "Time-Out",
        "func": "/* activate session timer */\nvar sessionTimer =  flow.get(\"sessionTimer\") || 0; \nflow.set(\"sessionTimer\", 0);\n\nmsg.socketid = flow.get(\"clientid\") || undefined;\nmsg.payload = \"Session Expired! Please singin again!\";\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720.8888053894043,
        "y": 2832.8784761428833,
        "wires": [
            [
                "53d247fe4bf3cceb",
                "28e99fea011b578e"
            ]
        ]
    },
    {
        "id": "53d247fe4bf3cceb",
        "type": "ui_toast",
        "z": "f9d84f6bec3ded8e",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "outputs": 1,
        "ok": "OK",
        "cancel": "",
        "topic": "Session Timeout",
        "name": "Time-Out Dialog",
        "x": 908.3889350891113,
        "y": 2798.8784761428833,
        "wires": [
            []
        ]
    },
    {
        "id": "74e20f4c7fa66047",
        "type": "ui_ui_control",
        "z": "f9d84f6bec3ded8e",
        "name": "Go to Signin Group",
        "x": 1115.3888530731201,
        "y": 2834.8784608840942,
        "wires": [
            []
        ]
    },
    {
        "id": "28e99fea011b578e",
        "type": "function",
        "z": "f9d84f6bec3ded8e",
        "name": "Sign-In Redirection",
        "func": "var msg = {};\n\nmsg.socketid = flow.get(\"clientid\") || undefined;\nmsg.payload = { group: {\n    hide: [\"PRISM_Network\", \n            \"PRISM_MQTT\"],\n    show: [\"PRISM_Signin\"]\n}\n};\n\nflow.set(\"clientid\", undefined);\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 918.888843536377,
        "y": 2835.878472328186,
        "wires": [
            [
                "74e20f4c7fa66047"
            ]
        ]
    },
    {
        "id": "44a31ba85d88cc69",
        "type": "ui_toast",
        "z": "f9d84f6bec3ded8e",
        "position": "bottom right",
        "displayTime": "1",
        "highlight": "",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "className": "",
        "topic": "Timer",
        "name": "Display Remaining Time",
        "x": 728.6110229492188,
        "y": 2949.878457069397,
        "wires": []
    },
    {
        "id": "777792010bd06293",
        "type": "function",
        "z": "f9d84f6bec3ded8e",
        "name": "Calculating Remaining Time (Debug)",
        "func": "var sessionTimer =  flow.get(\"sessionTimer\") || 0; \nvar currTime = Date.now();\nvar remainingSecs = Math.floor((15000 - (currTime - sessionTimer))/1000) + 1;\n    \nif ( sessionTimer == 0 /* Inactive, No user signed in */ ) {\n    return null;\n} else {\n    \n    if ( remainingSecs <= 7 ) msg.payload = \"Remaining : \" + remainingSecs + \" secs\";  \n    else return null;\n}\n\nmsg.socketid = flow.get(\"clientid\") || \"B1234\";\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 444.8888511657715,
        "y": 2949.878484725952,
        "wires": [
            [
                "44a31ba85d88cc69"
            ]
        ]
    },
    {
        "id": "f3faae9a876c1a37",
        "type": "ui_ui_control",
        "z": "f9d84f6bec3ded8e",
        "name": "Stay in Sensor Group",
        "x": 1065.3889198303223,
        "y": 2873.8784704208374,
        "wires": [
            []
        ]
    },
    {
        "id": "0ea03af595dc0a11",
        "type": "function",
        "z": "f9d84f6bec3ded8e",
        "name": "Sensor/History Goup",
        "func": "var msg = {};\nmsg.socketid = flow.get(\"clientid\") || undefined;\nmsg.payload = { group: {\n    show : [\"PRISM_Network\", \"PRISM_MQTT\"],\n    hide : [\"PRISM_Signin\"]\n    }\n};\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 762.3888511657715,
        "y": 2873.8784685134888,
        "wires": [
            [
                "f3faae9a876c1a37"
            ]
        ]
    },
    {
        "id": "01c59a7fa4b61d8e",
        "type": "function",
        "z": "f9d84f6bec3ded8e",
        "name": "Signin Goup",
        "func": "var msg = {};\n\nmsg.payload = { group: {\n    show : [\"PRISM_Network\", \"PRISM_MQTT\"],\n    hide : [\"PRISM_Signin\"]\n    }\n};\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 733.3889122009277,
        "y": 2914.8785066604614,
        "wires": [
            [
                "ea4947b6475d47cf"
            ]
        ]
    },
    {
        "id": "ea4947b6475d47cf",
        "type": "ui_ui_control",
        "z": "f9d84f6bec3ded8e",
        "name": "Go to Signin Group",
        "x": 1053.3890686035156,
        "y": 2911.8785066604614,
        "wires": [
            []
        ]
    },
    {
        "id": "c31f98a311a32169",
        "type": "debug",
        "z": "f9d84f6bec3ded8e",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "x": 400.3888626098633,
        "y": 2728.4132204055786,
        "wires": []
    },
    {
        "id": "ee41d7caec4656e2",
        "type": "ui_toast",
        "z": "f9d84f6bec3ded8e",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "outputs": 1,
        "ok": "OK",
        "cancel": "",
        "topic": "System In Use.",
        "name": "System In-Use Dialog",
        "x": 1040,
        "y": 2760,
        "wires": [
            []
        ]
    },
    {
        "id": "0165d5a3341eae2a",
        "type": "function",
        "z": "f9d84f6bec3ded8e",
        "name": "= 4 : System In Use",
        "func": "msg.payload = \"System is used by other user.\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 781.3331489562988,
        "y": 2760.99999332428,
        "wires": [
            [
                "ee41d7caec4656e2"
            ]
        ]
    },
    {
        "id": "25f8d622aa6c0c61",
        "type": "template",
        "z": "f9d84f6bec3ded8e",
        "name": "button template",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "{\n    \"name\": \"vng.iot.services.access.button.cloud.mqtt\",\n    \"id\": \"70:b3:d5:8d:88:20\",\n    \"synchronize\": {\n        \"events\": 256,\n        \"timeout\": -1\n    },\n    \"settings\": {\n        \"net\": {\n            \"processors\": [],\n            \"servers\": [],\n            \"listeners\": [],\n            \"channels\": [\n                {\n                    \"id\": \"local_btn\",\n                    \"protocol\": \"MQTT\",\n                    \"settings\": {\n                        \"host\": \"localhost\",\n                        \"port\": 1883\n                    }\n                },\n                {\n                    \"id\": \"cloud_btn\",\n                    \"protocol\": \"MQTT\",\n                    \"settings\": {\n                        \"host\": \"{{payload.host}}\",\n                        \"port\": {{payload.port}},\n                        \"user\": \"{{payload.user}}\",\n                        \"password\": \"{{payload.password}}\"\n                    }\n                }\n            ],\n            \"publishers\": [\n                {\n                    \"id\": \"cloud_btn\",\n                    \"channel\": \"cloud_btn\",\n                    \"topic\": \"vng-cloud/devices/access_button/request\"\n                }\n            ],\n            \"subscribers\": [\n                {\n                    \"id\": \"local_btn\",\n                    \"channel\": \"local_btn\",\n                    \"topic\": \"bluetooth.receive\"\n                }\n            ]\n        },\n        \"main\": {\n            \"subscriber\": \"local_btn\",\n            \"publisher\": \"cloud_btn\",\n            \"processor\": \"cloud\"\n        }\n    }\n}",
        "output": "str",
        "x": 570,
        "y": 1380,
        "wires": [
            [
                "c40f9ee63ca4e816"
            ]
        ]
    },
    {
        "id": "bff85e0723a39f96",
        "type": "template",
        "z": "f9d84f6bec3ded8e",
        "name": "door template",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "{\n    \"name\" : \"vng.iot.services.access.door.mesh.cloud\",\n    \"id\": \"AA:BB:CC:DD:EE:FF\",\n    \"synchronize\": {\n        \"events\": 256,\n        \"timeout\": -1\n    },\n    \"settings\": {\n        \"net\": {\n            \"processors\":[\n            ],\n\n            \"servers\": [\n            ],\n\n            \"listeners\": [\n            ],\n\n            \"channels\":[{\n                    \"id\": \"local\",\n                    \"protocol\": \"MQTT\",\n                    \"settings\": {\n                        \"host\": \"localhost\",\n                        \"port\": 1883\n                    }\n                }, {\n                    \"id\": \"cloud\",\n                    \"protocol\": \"MQTT\",\n\t\t    \"settings\": {\n\t\t\t\"host\": \"{{payload.host}}\",\n\t\t\t\"port\": {{payload.port}},\n\t\t\t\"user\": \"{{payload.user}}\",\n\t\t\t\"password\": \"{{payload.password}}\"\n\t\t    }\n                }, {\n                    \"id\": \"cloud_response\",\n                    \"protocol\": \"MQTT\",\n\t\t    \"settings\": {\n\t\t\t\"host\": \"{{payload.host}}\",\n\t\t\t\"port\": {{payload.port}},\n\t\t\t\"user\": \"{{payload.user}}\",\n\t\t\t\"password\": \"{{payload.password}}\"\n\t\t    }\n                }\n            ],\n\n            \"publishers\": [{\n                    \"id\": \"local\",\n                    \"channel\": \"local\",\n                    \"topic\": \"vng-local/devices/access_door\"\n                },{\n                    \"id\": \"cloud_response\",\n                    \"channel\": \"cloud_response\",\n                    \"topic\": \"vng-cloud/devices/access_door/response\"\n                }\n            ],\n\n            \"subscribers\": [{\n                    \"id\": \"cloud\",\n                    \"channel\": \"cloud\",\n                    \"topic\": \"vng-cloud/devices/access_door/command/%s\"\n                }\n            ]\n        },\n\n        \"main\": {\n            \"subscriber\": \"cloud\",\n            \"publisher\": \"local\",\n            \"publisher_response\": \"cloud_response\"\n        }\n    }\n}\n",
        "output": "str",
        "x": 570,
        "y": 1320,
        "wires": [
            [
                "f1cde6ae6cb91fed"
            ]
        ]
    },
    {
        "id": "ca98839162ea1e27",
        "type": "template",
        "z": "f9d84f6bec3ded8e",
        "name": "reader template",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "{\n    \"name\" : \"vng.iot.services.access.reader.cloud.mqtt\",\n    \"id\": \"70:b3:d5:8d:88:20\",\n    \"synchronize\": {\n        \"events\": 256,\n        \"timeout\": -1\n    },\n    \"settings\": {\n        \"net\": {\n            \"processors\":[],\n\n            \"servers\": [\n            ],\n\n            \"listeners\": [\n            ],\n\n            \"channels\":[{\n                    \"id\": \"local_btn\",\n                    \"protocol\": \"MQTT\",\n                    \"settings\": {\n                        \"host\": \"localhost\",\n                        \"port\": 1883\n                    }\n                },{\n                    \"id\": \"local_door\",\n                    \"protocol\": \"MQTT\",\n                    \"settings\": {\n                        \"host\": \"localhost\",\n                        \"port\": 1883\n                  }\n                },{\n                    \"id\": \"cloud_door\",\n                    \"protocol\": \"MQTT\",\n\t\t    \"settings\": {\n\t\t\t\"host\": \"{{payload.host}}\",\n\t\t\t\"port\": {{payload.port}},\n\t\t\t\"user\": \"{{payload.user}}\",\n\t\t\t\"password\": \"{{payload.password}}\"\n\t\t    }\n                }\n            ],\n\n            \"publishers\": [{\n                    \"id\": \"local_door\",\n                    \"channel\": \"local_door\",\n                    \"topic\": \"bluetooth.transmit\"\n                },{\n                    \"id\": \"cloud_door\",\n                    \"channel\": \"cloud_door\",\n                    \"topic\": \"vng-cloud/devices/access_reader/request\"\n                }\n            ],\n\n            \"subscribers\": [{\n                    \"id\": \"local_btn\",\n                    \"channel\": \"local_btn\",\n                    \"topic\": \"bluetooth.receive\"\n                }\n            ]\n        },\n\n        \"main\": {\n            \"subscriber\":       \"local_btn\",\n            \"publisher\":        \"local_door\",\n            \"publisher_cloud\":  \"cloud_door\"\n        }\n    }\n}\n",
        "output": "str",
        "x": 570,
        "y": 1440,
        "wires": [
            [
                "b21f8a4d6890afd8"
            ]
        ]
    },
    {
        "id": "f14a7a4599d31131",
        "type": "template",
        "z": "f9d84f6bec3ded8e",
        "name": "button.status template",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "{\n    \"name\": \"vng.iot.services.device.access.button.status.mesh\",\n    \"id\": \"70:b3:d5:8d:88:20\",\n    \"synchronize\": {\n        \"events\": 256,\n        \"timeout\": -1\n    },\n    \"settings\": {\n        \"net\": {\n            \"processors\": [\n                {\n                    \"id\": \"cloud\",\n                    \"protocol\": \"HTTP\",\n                    \"settings\": {\n                        \"url\": \"https://gbcsyslog.zing.vn/logging\",\n                        \"method\": \"POST\"\n                    }\n                }\n            ],\n            \"servers\": [],\n            \"listeners\": [],\n            \"channels\": [\n                {\n                    \"id\": \"local_status\",\n                    \"protocol\": \"MQTT\",\n                    \"settings\": {\n                        \"host\": \"localhost\",\n                        \"port\": 1883\n                    }\n                },\n                {\n                    \"id\": \"cloud_publish\",\n                    \"protocol\": \"MQTT\",\n                    \"settings\": {\n                        \"host\": \"{{payload.host}}\",\n                        \"port\": {{payload.port}},\n                        \"user\": \"{{payload.user}}\",\n                        \"password\": \"{{payload.password}}\"\n                    }\n                }\n            ],\n            \"publishers\": [\n                {\n                    \"id\": \"cloud_publish\",\n                    \"channel\": \"cloud_publish\",\n                    \"topic\": \"vng-cloud/device/status/button\"\n                }\n            ],\n            \"subscribers\": [\n                {\n                    \"id\": \"local_status\",\n                    \"channel\": \"local_status\",\n                    \"topic\": \"bluetooth.receive\"\n                }\n            ]\n        },\n        \"main\": {\n            \"subscriber\": \"local_status\",\n            \"publisher\": \"cloud_publish\",\n            \"processor\": \"cloud\"\n        }\n    }\n}",
        "output": "str",
        "x": 590,
        "y": 1500,
        "wires": [
            [
                "1dcbdbd486a87bf2"
            ]
        ]
    },
    {
        "id": "f269633194e50cf5",
        "type": "inject",
        "z": "f9d84f6bec3ded8e",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 110,
        "y": 500,
        "wires": [
            [
                "fbd72d773851f09d"
            ]
        ]
    },
    {
        "id": "1b399172ccc22adc",
        "type": "template",
        "z": "f9d84f6bec3ded8e",
        "name": "door.status template",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "{\n    \"name\" : \"vng.iot.services.device.access.door.status.mesh\",\n    \"id\": \"70:b3:d5:8d:88:20\",\n    \"synchronize\": {\n        \"events\": 256,\n        \"timeout\": -1\n    },\n    \"settings\": {\n        \"net\": {\n            \"processors\":[{\n                    \"id\": \"cloud\",\n                    \"protocol\": \"HTTP\",\n                    \"settings\": {\n                        \"url\": \"https://gbcsyslog.zing.vn/logging\",\n                        \"method\": \"POST\"\n                    }\n                }\n            ],\n\n            \"servers\": [\n            ],\n\n            \"listeners\": [\n            ],\n\n            \"channels\":[{\n                    \"id\": \"local_status\",\n                    \"protocol\": \"MQTT\",\n                    \"settings\": {\n                        \"host\": \"localhost\",\n                        \"port\": 1883\n                    }\n\n                },\n                {\n                    \"id\": \"cloud_publish\",\n                    \"protocol\": \"MQTT\",\n\t\t    \"settings\": {\n\t\t\t\"host\": \"{{payload.host}}\",\n\t\t\t\"port\": {{payload.port}},\n\t\t\t\"user\": \"{{payload.user}}\",\n\t\t\t\"password\": \"{{payload.password}}\"\n\t\t    }\n                }\n            ],\n\n            \"publishers\": [{\n                    \"id\": \"cloud_publish\",\n                    \"channel\": \"cloud_publish\",\n                    \"topic\": \"vng-cloud/device/status/door\"\n                }\n            ],\n\n            \"subscribers\": [{\n                    \"id\": \"local_status\",\n                    \"channel\": \"local_status\",\n                    \"topic\": \"bluetooth.receive\"\n                }\n            ]\n        },\n\n        \"main\": {\n            \"subscriber\": \"local_status\",\n            \"publisher\": \"cloud_publish\",\n            \"processor\": \"cloud\"\n        }\n    }\n}\n",
        "output": "str",
        "x": 590,
        "y": 1560,
        "wires": [
            [
                "163a18482ce6ccd8"
            ]
        ]
    },
    {
        "id": "8f3d8381a860e50c",
        "type": "template",
        "z": "f9d84f6bec3ded8e",
        "name": "reader.status template",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "{\n    \"name\": \"vng.iot.services.device.access.reader.status.mesh\",\n    \"id\": \"70:b3:d5:8d:88:20\",\n    \"synchronize\": {\n        \"events\": 256,\n        \"timeout\": -1\n    },\n    \"settings\": {\n        \"net\": {\n            \"processors\": [\n                {\n                    \"id\": \"cloud\",\n                    \"protocol\": \"HTTP\",\n                    \"settings\": {\n                        \"url\": \"https://gbcsyslog.zing.vn/logging\",\n                        \"method\": \"POST\"\n                    }\n                }\n            ],\n            \"servers\": [],\n            \"listeners\": [],\n            \"channels\": [\n                {\n                    \"id\": \"local_status\",\n                    \"protocol\": \"MQTT\",\n                    \"settings\": {\n                        \"host\": \"localhost\",\n                        \"port\": 1883\n                    }\n                },\n                {\n                    \"id\": \"cloud_publish\",\n                    \"protocol\": \"MQTT\",\n                    \"settings\": {\n                        \"host\": \"{{payload.host}}\",\n                        \"port\": {{payload.port}},\n                        \"user\": \"{{payload.user}}\",\n                        \"password\": \"{{payload.password}}\"\n                    }\n                }\n            ],\n            \"publishers\": [\n                {\n                    \"id\": \"cloud_publish\",\n                    \"channel\": \"cloud_publish\",\n                    \"topic\": \"vng-cloud/device/status/reader\"\n                }\n            ],\n            \"subscribers\": [\n                {\n                    \"id\": \"local_status\",\n                    \"channel\": \"local_status\",\n                    \"topic\": \"bluetooth.receive\"\n                }\n            ]\n        },\n        \"main\": {\n            \"subscriber\": \"local_status\",\n            \"publisher\": \"cloud_publish\",\n            \"processor\": \"cloud\"\n        }\n    }\n}",
        "output": "str",
        "x": 590,
        "y": 1620,
        "wires": [
            [
                "88e699c6720a7326"
            ]
        ]
    },
    {
        "id": "2b87391b37e9e73c",
        "type": "template",
        "z": "f9d84f6bec3ded8e",
        "name": "gateway.status template",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "{\n    \"name\": \"vng.iot.services.device.gateway.status\",\n    \"id\": \"70:b3:d5:8d:88:20\",\n    \"synchronize\": {\n        \"events\": 256,\n        \"timeout\": -1\n    },\n    \"settings\": {\n        \"net\": {\n            \"processors\": [],\n            \"servers\": [],\n            \"listeners\": [],\n            \"channels\": [\n                {\n                    \"id\": \"cloud_update_status\",\n                    \"protocol\": \"MQTT\",\n                    \"settings\": {\n                        \"host\": \"{{payload.host}}\",\n                        \"port\": {{payload.port}},\n                        \"user\": \"{{payload.user}}\",\n                        \"password\": \"{{payload.password}}\"\n                    }\n                },\n                {\n                    \"id\": \"cloud_publish_status\",\n                    \"protocol\": \"MQTT\",\n                    \"settings\": {\n                        \"host\": \"mqtt-customer.prism.vn\",\n                        \"port\": 1886,\n                        \"user\": \"mqttM1t3kBridge\",\n                        \"password\": \"mqttM1t3kBridge\"\n                    }\n                }\n            ],\n            \"publishers\": [\n                {\n                    \"id\": \"cloud_publish_status\",\n                    \"channel\": \"cloud_publish_status\",\n                    \"topic\": \"vng-cloud/devices/gateway/status\"\n                }\n            ],\n            \"subscribers\": [\n                {\n                    \"id\": \"cloud_update_status\",\n                    \"channel\": \"cloud_update_status\",\n                    \"topic\": \"vng-cloud/devices/70:b3:d5:8d:89:ff/update_version/gateway\"\n                }\n            ]\n        },\n        \"main\": {\n            \"subscriber\": \"cloud_update_status\",\n            \"publisher\": \"cloud_publish_status\",\n            \"max_period_ms\": 6000,\n            \"min_period_ms\": 3000\n        }\n    }\n}",
        "output": "str",
        "x": 600,
        "y": 1680,
        "wires": [
            [
                "49fa514746142735"
            ]
        ]
    },
    {
        "id": "2348f3c0221e339f",
        "type": "template",
        "z": "f9d84f6bec3ded8e",
        "name": "light.hub.group.config",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "{\n    \"name\" : \"services.light.hub.group.config.mesh\",\n    \"id\": \"AA:BB:CC:DD:EE:FF\",\n    \"synchronize\": {\n        \"events\": 256,\n        \"timeout\": -1\n    },\n    \"settings\": {\n        \"net\": {\n            \"processors\":[\n            ],\n\n            \"servers\": [\n            ],\n\n            \"listeners\": [\n            ],\n\n            \"channels\":[{\n                    \"id\": \"local\",\n                    \"protocol\": \"MQTT\",\n                    \"settings\": {\n                        \"host\": \"localhost\",\n                        \"port\": 1883\n                    }\n                }, {\n                    \"id\": \"cloud\",\n                    \"protocol\": \"MQTT\",\n\t\t    \"settings\": {\n\t\t\t\"host\": \"{{payload.host}}\",\n\t\t\t\"port\": {{payload.port}},\n\t\t\t\"user\": \"{{payload.user}}\",\n\t\t\t\"password\": \"{{payload.password}}\"\n\t\t    }\n                },{\n                    \"id\": \"cloud_hub\",\n                    \"protocol\": \"MQTT\",\n\t\t    \"settings\": {\n\t\t\t\"host\": \"{{payload.host}}\",\n\t\t\t\"port\": {{payload.port}},\n\t\t\t\"user\": \"{{payload.user}}\",\n\t\t\t\"password\": \"{{payload.password}}\"\n\t\t    }\n                }\n            ],\n\n            \"publishers\": [{\n                    \"id\": \"local\",\n                    \"channel\": \"local\",\n                    \"topic\": \"bluetooth.transmit\"\n                }\n            ],\n\n            \"subscribers\": [{\n                    \"id\": \"cloud\",\n                    \"channel\": \"cloud\",\n                    \"topic\": \"vng-cloud/devices/%s/update_config/lighthub_port\"\n                },\n                {\n                    \"id\": \"cloud_hub\",\n                    \"channel\": \"cloud_hub\",\n                    \"topic\": \"vng-cloud/devices/%s/update_config/lighthub\"\n                }\n            ]\n        },\n\n        \"main\": {\n            \"subscriber\": \"cloud\",\n            \"subscriber_hub\": \"cloud_hub\",\n            \"publisher\": \"local\"\n        }\n    }\n}\n",
        "output": "str",
        "x": 590,
        "y": 1740,
        "wires": [
            [
                "ee8693cff641105b"
            ]
        ]
    },
    {
        "id": "260f7ec97004ba62",
        "type": "template",
        "z": "f9d84f6bec3ded8e",
        "name": "light.hub.group.mesh",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "{\n    \"name\" : \"services.light.hub.group.mesh\",\n    \"id\": \"AA:BB:CC:DD:EE:FF\",\n    \"synchronize\": {\n        \"events\": 256,\n        \"timeout\": -1\n    },\n    \"settings\": {\n        \"net\": {\n            \"processors\":[\n            ],\n\n            \"servers\": [\n            ],\n\n            \"listeners\": [\n            ],\n\n            \"channels\":[{\n                    \"id\": \"local\",\n                    \"protocol\": \"MQTT\",\n                    \"settings\": {\n                        \"host\": \"localhost\",\n                        \"port\": 1883\n                    }\n                }, {\n                    \"id\": \"cloud_status\",\n                    \"protocol\": \"MQTT\",\n\t\t    \"settings\": {\n\t\t\t\"host\": \"{{payload.host}}\",\n\t\t\t\"port\": {{payload.port}},\n\t\t\t\"user\": \"{{payload.user}}\",\n\t\t\t\"password\": \"{{payload.password}}\"\n\t\t    }\n                }, {\n                    \"id\": \"cloud\",\n                    \"protocol\": \"MQTT\",\n\t\t    \"settings\": {\n\t\t\t\"host\": \"{{payload.host}}\",\n\t\t\t\"port\": {{payload.port}},\n\t\t\t\"user\": \"{{payload.user}}\",\n\t\t\t\"password\": \"{{payload.password}}\"\n\t\t    }\n                }\n            ],\n\n            \"publishers\": [{\n                    \"id\": \"local\",\n                    \"channel\": \"local\",\n                    \"topic\": \"bluetooth.transmit\"\n                },\n                {\n                    \"id\": \"cloud_status\",\n                    \"channel\": \"cloud_status\",\n                    \"topic\": \"device.light.mesh.status\"\n                }\n            ],\n\n            \"subscribers\": [{\n                    \"id\": \"cloud\",\n                    \"channel\": \"cloud\",\n                    \"topic\": \"vng-cloud/devices/%s/switch_on_off/request\"\n                }\n            ]\n        },\n\n        \"main\": {\n            \"subscriber\": \"cloud\",\n            \"publisher\": \"local\",\n            \"publisher_status\": \"cloud_status\"\n\n        }\n    }\n}\n",
        "output": "str",
        "x": 590,
        "y": 1800,
        "wires": [
            [
                "3927efeb1deb4ec3"
            ]
        ]
    },
    {
        "id": "ce803a9c603ffc4e",
        "type": "template",
        "z": "f9d84f6bec3ded8e",
        "name": "light.hub.mesh",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "{\n    \"name\" : \"services.light.hub.mesh\",\n    \"id\": \"AA:BB:CC:DD:EE:FF\",\n    \"synchronize\": {\n        \"events\": 256,\n        \"timeout\": -1\n    },\n    \"settings\": {\n        \"net\": {\n            \"processors\":[\n            ],\n\n            \"servers\": [\n            ],\n\n            \"listeners\": [\n            ],\n\n            \"channels\":[{\n                    \"id\": \"local\",\n                    \"protocol\": \"MQTT\",\n                    \"settings\": {\n                        \"host\": \"localhost\",\n                        \"port\": 1883\n                    }\n                },{\n                    \"id\": \"cloud\",\n                    \"protocol\": \"MQTT\",\n\t\t    \"settings\": {\n\t\t\t\"host\": \"{{payload.host}}\",\n\t\t\t\"port\": {{payload.port}},\n\t\t\t\"user\": \"{{payload.user}}\",\n\t\t\t\"password\": \"{{payload.password}}\"\n\t\t    }\n                },{\n                    \"id\": \"cloud_response\",\n                    \"protocol\": \"MQTT\",\n\t\t    \"settings\": {\n\t\t\t\"host\": \"{{payload.host}}\",\n\t\t\t\"port\": {{payload.port}},\n\t\t\t\"user\": \"{{payload.user}}\",\n\t\t\t\"password\": \"{{payload.password}}\"\n\t\t    }\n                }\n            ],\n\n            \"publishers\": [{\n                    \"id\": \"local\",\n                    \"channel\": \"local\",\n                    \"topic\": \"bluetooth.transmit\"\n                },\n                {\n                    \"id\": \"cloud_response\",\n                    \"channel\": \"cloud_response\",\n                    \"topic\": \"vng-cloud/devices/switch_on_off/response\"\n                }\n            ],\n\n            \"subscribers\": [{\n                    \"id\": \"cloud\",\n                    \"channel\": \"cloud\",\n                    \"topic\": \"vng-cloud/devices/%s/switch_on_off/request\"\n                }\n            ]\n        },\n\n        \"main\": {\n            \"subscriber\": \"cloud\",\n            \"publisher\": \"local\",\n            \"publisher_response\": \"cloud_response\"\n        }\n    }\n}\n",
        "output": "str",
        "x": 570,
        "y": 1860,
        "wires": [
            [
                "a8f52e71c4ba305c"
            ]
        ]
    },
    {
        "id": "3970b1339d2db801",
        "type": "template",
        "z": "f9d84f6bec3ded8e",
        "name": "light.hub.scaling.config",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "{\n    \"name\" : \"services.light.hub.scaling.config.mesh\",\n    \"id\": \"AA:BB:CC:DD:EE:FF\",\n    \"synchronize\": {\n        \"events\": 256,\n        \"timeout\": -1\n    },\n    \"settings\": {\n        \"net\": {\n            \"processors\":[\n            ],\n\n            \"servers\": [\n            ],\n\n            \"listeners\": [\n            ],\n\n            \"channels\":[{\n                    \"id\": \"local\",\n                    \"protocol\": \"MQTT\",\n                    \"settings\": {\n                        \"host\": \"localhost\",\n                        \"port\": 1883\n                    }\n                },{\n                    \"id\": \"cloud\",\n                    \"protocol\": \"MQTT\",\n\t\t    \"settings\": {\n\t\t\t\"host\": \"{{payload.host}}\",\n\t\t\t\"port\": {{payload.port}},\n\t\t\t\"user\": \"{{payload.user}}\",\n\t\t\t\"password\": \"{{payload.password}}\"\n\t\t    }\n                }\n            ],\n\n            \"publishers\": [{\n                    \"id\": \"local\",\n                    \"channel\": \"local\",\n                    \"topic\": \"bluetooth.transmit\"\n                }\n            ],\n\n            \"subscribers\": [{\n                    \"id\": \"cloud\",\n                    \"channel\": \"cloud\",\n                    \"topic\": \"vng-cloud/devices/relay_config/%s\"\n                }\n            ]\n        },\n\n        \"main\": {\n            \"subscriber\": \"cloud\",\n            \"publisher\": \"local\"\n        }\n    }\n}\n",
        "output": "str",
        "x": 590,
        "y": 1920,
        "wires": [
            [
                "66da2bbde49406d2"
            ]
        ]
    },
    {
        "id": "2c5bc40caaf18d38",
        "type": "inject",
        "z": "f9d84f6bec3ded8e",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 1460,
        "wires": [
            [
                "d3a76b13e98d08c0"
            ]
        ]
    },
    {
        "id": "d3a76b13e98d08c0",
        "type": "function",
        "z": "f9d84f6bec3ded8e",
        "name": "Loading new MQTT",
        "func": "msg.payload = global.get(\"new_mqtt\");\nglobal.set(\"mqtt\", msg.payload);\nnode.warn(msg.payload);\nreturn msg;\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 1460,
        "wires": [
            [
                "bff85e0723a39f96",
                "25f8d622aa6c0c61",
                "ca98839162ea1e27",
                "f14a7a4599d31131",
                "1b399172ccc22adc",
                "8f3d8381a860e50c",
                "2b87391b37e9e73c",
                "2348f3c0221e339f",
                "260f7ec97004ba62",
                "ce803a9c603ffc4e",
                "3970b1339d2db801",
                "983f63a5a5160e64"
            ]
        ]
    },
    {
        "id": "f1cde6ae6cb91fed",
        "type": "file",
        "z": "f9d84f6bec3ded8e",
        "name": "door.mesh.cloud.json",
        "filename": "/etc/vng/services/access/door.mesh.cloud.json",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 830,
        "y": 1320,
        "wires": [
            []
        ]
    },
    {
        "id": "c40f9ee63ca4e816",
        "type": "file",
        "z": "f9d84f6bec3ded8e",
        "name": "button.mesh.cloud.mqtt.json",
        "filename": "/etc/vng/services/access/button.mesh.cloud.mqtt.json",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 850,
        "y": 1380,
        "wires": [
            []
        ]
    },
    {
        "id": "b21f8a4d6890afd8",
        "type": "file",
        "z": "f9d84f6bec3ded8e",
        "name": "reader.mesh.cloud.mqtt.json",
        "filename": "/etc/vng/services/access/reader.mesh.cloud.mqtt.json",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 850,
        "y": 1440,
        "wires": [
            []
        ]
    },
    {
        "id": "1dcbdbd486a87bf2",
        "type": "file",
        "z": "f9d84f6bec3ded8e",
        "name": "access.button.status.mesh.json",
        "filename": "/etc/vng/services/device/access.button.status.mesh.json",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 860,
        "y": 1500,
        "wires": [
            []
        ]
    },
    {
        "id": "3927efeb1deb4ec3",
        "type": "file",
        "z": "f9d84f6bec3ded8e",
        "name": "light.hub.group.mesh.json",
        "filename": "/etc/vng/services/light/light.hub.group.mesh.json",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 840,
        "y": 1800,
        "wires": [
            []
        ]
    },
    {
        "id": "2754ca75a46e5ff8",
        "type": "ui_button",
        "z": "f9d84f6bec3ded8e",
        "name": "Restart Services",
        "group": "01bec776cfc5c12a",
        "order": 5,
        "width": "6",
        "height": 1,
        "passthru": false,
        "label": "Restart Services",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 170,
        "y": 2020,
        "wires": [
            [
                "4b1680c1465dbec9"
            ]
        ]
    },
    {
        "id": "163a18482ce6ccd8",
        "type": "file",
        "z": "f9d84f6bec3ded8e",
        "name": "access.button.status.mesh.json",
        "filename": "/etc/vng/services/device/access.button.status.mesh.json",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 860,
        "y": 1560,
        "wires": [
            []
        ]
    },
    {
        "id": "88e699c6720a7326",
        "type": "file",
        "z": "f9d84f6bec3ded8e",
        "name": "access.reader.status.mesh.json",
        "filename": "/etc/vng/services/device/access.reader.status.mesh.json",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 860,
        "y": 1620,
        "wires": [
            []
        ]
    },
    {
        "id": "49fa514746142735",
        "type": "file",
        "z": "f9d84f6bec3ded8e",
        "name": "device.gateway.status.json",
        "filename": "/etc/vng/services/device/device.gateway.status.json",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 850,
        "y": 1680,
        "wires": [
            []
        ]
    },
    {
        "id": "a8f52e71c4ba305c",
        "type": "file",
        "z": "f9d84f6bec3ded8e",
        "name": "light.hub.mesh.json",
        "filename": "/etc/vng/services/light/light.hub.mesh.json",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 820,
        "y": 1860,
        "wires": [
            []
        ]
    },
    {
        "id": "66da2bbde49406d2",
        "type": "file",
        "z": "f9d84f6bec3ded8e",
        "name": "light.hub.scaling.config.mesh.json",
        "filename": "/etc/vng/services/light/light.hub.scaling.config.mesh.json",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 870,
        "y": 1920,
        "wires": [
            []
        ]
    },
    {
        "id": "ee8693cff641105b",
        "type": "file",
        "z": "f9d84f6bec3ded8e",
        "name": "light.hub.group.config.mesh.json",
        "filename": "/etc/vng/services/light/light.hub.group.config.mesh.json",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 860,
        "y": 1740,
        "wires": [
            []
        ]
    },
    {
        "id": "6d69a4326f2d4f26",
        "type": "exec",
        "z": "f9d84f6bec3ded8e",
        "command": "",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 610,
        "y": 2020,
        "wires": [
            [
                "370487bf67d20d87"
            ],
            [
                "370487bf67d20d87"
            ],
            []
        ]
    },
    {
        "id": "4b1680c1465dbec9",
        "type": "function",
        "z": "f9d84f6bec3ded8e",
        "name": "Restart Services",
        "func": "msg.payload = `sudo systemctl restart vng.iot.services.access.button.mesh.cloud.mqtt.service;\\\nsudo systemctl restart vng.iot.services.access.door.mesh.cloud.service; \\\nsudo systemctl restart vng.iot.services.access.door.mesh.service; \\\nsudo systemctl restart vng.iot.services.access.reader.mesh.cloud.mqtt.service; \\\nsudo systemctl restart vng.iot.services.bluetooth.mesh.serial.access.service; \\\nsudo systemctl restart vng.iot.services.bluetooth.mesh.serial.service; \\\nsudo systemctl restart vng.iot.services.device.access.button.status.mesh.service; \\\nsudo systemctl restart vng.iot.services.device.access.door.status.mesh.service; \\\nsudo systemctl restart vng.iot.services.device.access.reader.status.mesh.service; \\\nsudo systemctl restart vng.iot.services.device.gateway.status.service; \\\nsudo systemctl restart vng.iot.services.device.light.port.levels.mesh.service; \\\nsudo systemctl restart vng.iot.services.device.light.port.status.mesh.service; \\\nsudo systemctl restart vng.iot.services.light.hub.group.config.mesh.service; \\\nsudo systemctl restart vng.iot.services.light.hub.group.mesh.service; \\\nsudo systemctl restart vng.iot.services.light.hub.mesh.service; \\\nsudo systemctl restart vng.iot.services.light.hub.scaling.config.mesh.service`;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 2020,
        "wires": [
            [
                "6d69a4326f2d4f26"
            ]
        ]
    },
    {
        "id": "f99d3e029b35c96f",
        "type": "inject",
        "z": "f9d84f6bec3ded8e",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 170,
        "y": 1960,
        "wires": [
            [
                "4b1680c1465dbec9"
            ]
        ]
    },
    {
        "id": "370487bf67d20d87",
        "type": "debug",
        "z": "f9d84f6bec3ded8e",
        "name": "debug 1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 860,
        "y": 2020,
        "wires": []
    },
    {
        "id": "ac83b6e4f2a32822",
        "type": "rpi-gpio out",
        "z": "f9d84f6bec3ded8e",
        "name": "",
        "pin": "8",
        "set": "",
        "level": "0",
        "freq": "",
        "out": "out",
        "bcm": true,
        "x": 600,
        "y": 2100,
        "wires": []
    },
    {
        "id": "f8715b206901e3cc",
        "type": "inject",
        "z": "f9d84f6bec3ded8e",
        "name": "Timer",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "3",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 210,
        "y": 2100,
        "wires": [
            [
                "ecc1ee0346876cb7"
            ]
        ]
    },
    {
        "id": "ecc1ee0346876cb7",
        "type": "trigger",
        "z": "f9d84f6bec3ded8e",
        "name": "",
        "op1": "1",
        "op2": "0",
        "op1type": "num",
        "op2type": "num",
        "duration": "1",
        "extend": false,
        "overrideDelay": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 400,
        "y": 2100,
        "wires": [
            [
                "ac83b6e4f2a32822"
            ]
        ]
    },
    {
        "id": "f3bfa93f6b3302c2",
        "type": "mqtt in",
        "z": "f9d84f6bec3ded8e",
        "name": "",
        "topic": "#",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "5d6a25d282f58ea0",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 210,
        "y": 2320,
        "wires": [
            [
                "127dccbcc8bdb01b"
            ]
        ]
    },
    {
        "id": "127dccbcc8bdb01b",
        "type": "ui_text",
        "z": "f9d84f6bec3ded8e",
        "group": "dd6cd20e8fd2d77f",
        "order": 0,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "text",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 410,
        "y": 2320,
        "wires": []
    },
    {
        "id": "2ac476f9d3c8203e",
        "type": "inject",
        "z": "f9d84f6bec3ded8e",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 200,
        "y": 2400,
        "wires": [
            []
        ]
    },
    {
        "id": "d28ce6feca7dfb59",
        "type": "ui_toast",
        "z": "f9d84f6bec3ded8e",
        "position": "top right",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "className": "",
        "topic": "",
        "name": "",
        "x": 330,
        "y": 1660,
        "wires": []
    },
    {
        "id": "983f63a5a5160e64",
        "type": "function",
        "z": "f9d84f6bec3ded8e",
        "name": "function 1",
        "func": "msg.payload = \"Saved successfully\"\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 1580,
        "wires": [
            [
                "d28ce6feca7dfb59"
            ]
        ]
    },
    {
        "id": "91cf05178474047d",
        "type": "ui_group",
        "name": "Network",
        "tab": "8c9d64c2fcf69dad",
        "order": 2,
        "disp": true,
        "width": 6,
        "collapse": false,
        "className": ""
    },
    {
        "id": "01bec776cfc5c12a",
        "type": "ui_group",
        "name": "MQTT",
        "tab": "8c9d64c2fcf69dad",
        "order": 3,
        "disp": true,
        "width": 6,
        "collapse": false,
        "className": ""
    },
    {
        "id": "b82da486.9fc8d8",
        "type": "ui_group",
        "name": "Signin",
        "tab": "8c9d64c2fcf69dad",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "5d6a25d282f58ea0",
        "type": "mqtt-broker",
        "name": "",
        "broker": "localhost",
        "port": 1883,
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": 4,
        "keepalive": 60,
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "dd6cd20e8fd2d77f",
        "type": "ui_group",
        "name": "Serivces",
        "tab": "8c9d64c2fcf69dad",
        "order": 4,
        "disp": true,
        "width": 6,
        "collapse": false,
        "className": ""
    },
    {
        "id": "8c9d64c2fcf69dad",
        "type": "ui_tab",
        "name": "PRISM",
        "icon": "Config",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "f8bc8e0b415a26ec",
        "type": "global-config",
        "env": [],
        "modules": {
            "node-red-dashboard": "3.6.5",
            "node-red-node-pi-gpio": "2.0.6"
        }
    }
]